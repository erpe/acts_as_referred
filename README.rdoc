= ActsAsReferred

A gentle gem which offers the possibility to track referrer.
When Object gets persistet to database a relational referee is (:after_create) persistet as well.

== Status 

not yet production ready

== Install 

at this stage only by github:
so add to your Gemfile  

  gem 'acts_as_referred', :git => 'git://github.com/erpe/acts_as_referred.git'

afterwards run the rake task to create necessary database table

  rake acts_as_referred:create_table

add +acts_as_referred+ to your model e.g.

  class Order < ActiveRecord::Base
    acts_as_referred
  end

and the final step - adopt your ApplicationController with:

  class ApplicationController < ActionController::Base
    include ActsAsReferred::Controller
  end


acts_as_referred supports manual tagged campaigns 

if you use google-adwords you have to define manual-url-tagging instead of googles default auto-tagging

auto-tagging (gclid) is recognized as campaign but can not be resolved. 
(could be by parsing e.g. google-analytics cookies - but i think its kind of bad practice to relay on googles cookie-syntax)


== Usage 

your Order now has a relation to *Referee* on creation:
you can query referees like:

  (...somehow a request created a new Order )

order.referee.is_campaign::
  returns true if request supplied campaign-arguments

  recognized arguments:
    utm_campaign, utm_term, pk_campaign, pk_term
  

order.referee.campaign::
  returns campaign name if supplied by tagging 

order.referee.keywords::
  returns supplied keywords in the request.

order.referee.host::
  returns referrer-hostname

Referee.campaigns::
  returns collection of referee-instances connected to a campaign


== Background  

whenever a request travels through ApplicationController and initializes a session the delivered referrer is persisted in the session. 
As soon as an ActiveRecord which includes +acts_as_referred+ gets created the stored referrer will be used to build a new *Referee*

